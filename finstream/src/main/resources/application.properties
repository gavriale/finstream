# ===== App =====
spring.application.name=finstream
server.port=8080

# ===== Postgres (Timescale) =====
spring.datasource.url=jdbc:postgresql://localhost:5433/finstream
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.connection-timeout=20000
spring.sql.init.mode=never

# ===== Redis =====
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.data.redis.timeout=2s
# If Redis isn't running yet and you just want app up:
# management.health.redis.enabled=false

# ===== Kafka =====
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.client-id=finstream-app

# Producer (fast & safe defaults)
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.acks=all
spring.kafka.producer.properties.enable.idempotence=true
spring.kafka.producer.properties.compression.type=snappy
spring.kafka.producer.properties.linger.ms=10
spring.kafka.producer.properties.batch.size=131072
spring.kafka.producer.properties.max.in.flight.requests.per.connection=5
spring.kafka.producer.properties.delivery.timeout.ms=120000
# Optional: don't include type headers in JSON
spring.kafka.producer.properties.spring.json.add.type.headers=false

# Consumer
spring.kafka.consumer.group-id=finstream-dev
spring.kafka.consumer.auto-offset-reset=latest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*

# ===== Actuator / Prometheus =====
#management.endpoints.web.exposure.include=health,info,metrics,prometheus
#management.endpoint.health.show-details=always
#management.metrics.export.prometheus.enabled=true
management.server.port=8080
